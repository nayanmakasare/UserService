// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: UserService.proto

package UserService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	CreateUser(ctx context.Context, in *User, opts ...client.CallOption) (*CreateReponse, error)
	UpdateUser(ctx context.Context, in *User, opts ...client.CallOption) (*UpdateResponse, error)
	DeleteUser(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteReponse, error)
	GetUser(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*User, error)
	LinkedTvDevice(ctx context.Context, in *TvDevice, opts ...client.CallOption) (*LinkedDeviceResponse, error)
	RemoveTvDevice(ctx context.Context, in *RemoveTvDeviceRequest, opts ...client.CallOption) (*RemoveTvDeviceResponse, error)
	GetLinkedDevices(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*LinkedDeviceResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "UserService"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUser(ctx context.Context, in *User, opts ...client.CallOption) (*CreateReponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(CreateReponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *User, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteReponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(DeleteReponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LinkedTvDevice(ctx context.Context, in *TvDevice, opts ...client.CallOption) (*LinkedDeviceResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.LinkedTvDevice", in)
	out := new(LinkedDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RemoveTvDevice(ctx context.Context, in *RemoveTvDeviceRequest, opts ...client.CallOption) (*RemoveTvDeviceResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RemoveTvDevice", in)
	out := new(RemoveTvDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetLinkedDevices(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*LinkedDeviceResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetLinkedDevices", in)
	out := new(LinkedDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	CreateUser(context.Context, *User, *CreateReponse) error
	UpdateUser(context.Context, *User, *UpdateResponse) error
	DeleteUser(context.Context, *DeleteRequest, *DeleteReponse) error
	GetUser(context.Context, *GetRequest, *User) error
	LinkedTvDevice(context.Context, *TvDevice, *LinkedDeviceResponse) error
	RemoveTvDevice(context.Context, *RemoveTvDeviceRequest, *RemoveTvDeviceResponse) error
	GetLinkedDevices(context.Context, *GetRequest, *LinkedDeviceResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		CreateUser(ctx context.Context, in *User, out *CreateReponse) error
		UpdateUser(ctx context.Context, in *User, out *UpdateResponse) error
		DeleteUser(ctx context.Context, in *DeleteRequest, out *DeleteReponse) error
		GetUser(ctx context.Context, in *GetRequest, out *User) error
		LinkedTvDevice(ctx context.Context, in *TvDevice, out *LinkedDeviceResponse) error
		RemoveTvDevice(ctx context.Context, in *RemoveTvDeviceRequest, out *RemoveTvDeviceResponse) error
		GetLinkedDevices(ctx context.Context, in *GetRequest, out *LinkedDeviceResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *User, out *CreateReponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *User, out *UpdateResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *DeleteRequest, out *DeleteReponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *GetRequest, out *User) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *userServiceHandler) LinkedTvDevice(ctx context.Context, in *TvDevice, out *LinkedDeviceResponse) error {
	return h.UserServiceHandler.LinkedTvDevice(ctx, in, out)
}

func (h *userServiceHandler) RemoveTvDevice(ctx context.Context, in *RemoveTvDeviceRequest, out *RemoveTvDeviceResponse) error {
	return h.UserServiceHandler.RemoveTvDevice(ctx, in, out)
}

func (h *userServiceHandler) GetLinkedDevices(ctx context.Context, in *GetRequest, out *LinkedDeviceResponse) error {
	return h.UserServiceHandler.GetLinkedDevices(ctx, in, out)
}
